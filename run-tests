#!/usr/bin/env bash


OS_NAME="$(uname -s)"
case "${OS_NAME}" in
    Darwin*)
        realpath() {
            [[ $1 = /* ]] && echo "$1" || echo "${PWD}/${1#./}"
        }
    ;;
esac


SCRIPT_DIR=$(realpath "$(dirname "${0}")")
ARGS=(-v)

usage() {
cat << EOF
Run e2e tests.

Usage:
    ${0} [OPTIONS] [EXTRA_ARGS]

All the EXTRA_ARGS are passed to pytest

Options:
    --debug-sh      Set bash 'x' option.
    --envs          .env file to expose inside app container (default: ${ENVS}).
    --leave-db      Do not remove database on exit.
    --pytest-help   Pytest related help. See the 'Custom options' section.
    --help          Show help message.
EOF
}

ENVS=test.env

while [ "${#}" -gt 0 ]; do
    case "${1}" in
        -h|--help)
            usage
            exit
            ;;

        --envs)
            shift
            ENVS="${1}"
            ;;

        --debug-sh)
            set -x
            ;;

        --leave-db)
            LEAVE_DB=1
            ;;

        --leave-containers)
            LEAVE_CONTAINERS=1
            ;;

        --pytest-help)
            PYTEST_HELP=1
            ARGS+=(--help)
            ;;

        *)
            ARGS+=("${1}")
            ;;
    esac
    
   shift
done

set -eEu

E2E_CONTAINER=e2e-test-instance
VOLUMES_DIR="${SCRIPT_DIR}/.volumes"
MONGO_VOLUMES_DIR="${VOLUMES_DIR}/mongodb"
ARTIFACTS_DIR="${SCRIPT_DIR}/.artifacts"

remove_container() {
    if [ -n "${REMOVED+x}" ]; then
        return
    fi
    REMOVED=1
    popd &> /dev/null

    if [ -n "$(docker ps -qa --filter name=valery)" ]; then
        rm -rf "${ARTIFACTS_DIR}"
        mkdir -p "${ARTIFACTS_DIR}"
        echo 'Collecting artifacts...'
        docker logs valery &> "${ARTIFACTS_DIR}/valery.log"
    fi

    if [ -n "${LEAVE_CONTAINERS+x}" ]; then
        docker compose stop
    else
        if [ -n "${LEAVE_DB+x}" ]; then
            docker compose rm --stop --force
        else 
            docker compose rm --stop --force --volumes
            rm -rf "${VOLUMES_DIR}"

            VOLUME="$(docker volume ls -q | grep valery-data --color=never)"
            if [ -n "${VOLUME}" ]; then
                docker volume rm --force "${VOLUME}"
            fi
        fi 
    fi

    # if [ -n "$(docker ps -a | grep "${E2E_CONTAINER}")" ]; then
    #     docker stop "${E2E_CONTAINER}"
    #     docker rm --force "${E2E_CONTAINER}"
    # fi
}

on_exit() {
    remove_container
}

on_error() {
    remove_container
}

trap on_exit EXIT
trap 'on_error ${?} ${LINENO}' ERR

echo -e "\e[36mRunning e2e tests...\e[0m"

mkdir -p "${MONGO_VOLUMES_DIR}"

E2E_TESTS_DIR="${SCRIPT_DIR}/e2e-tests"
E2E_IMAGE=e2e-test
E2E_TESTS_DOCKERFILE="${SCRIPT_DIR}/e2e-tests.Dockerfile"

pushd "${SCRIPT_DIR}" &> /dev/null

docker build -t "${E2E_IMAGE}:latest" -f "${E2E_TESTS_DOCKERFILE}" "${SCRIPT_DIR}"

if [ -z "${PYTEST_HELP+x}" ]; then
    "${SCRIPT_DIR}/run" --envs ${ENVS} --detach
fi

NETWORK=valery_default

if [ -z "$(docker network ls --filter "name=${NETWORK}" -q)" ]; then
    docker network create "${NETWORK}"
fi

docker run --rm \
    --env "VALERY_BOT_CHAT_ID=${VALERY_BOT_CHAT_ID:-}" \
    --env "VALERY_BOT_SESSION_NAME=${VALERY_BOT_SESSION_NAME:-}" \
    --network valery_default --name "${E2E_CONTAINER}" "${E2E_IMAGE}" pytest "${ARGS[@]}"
